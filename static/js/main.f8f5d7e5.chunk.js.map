{"version":3,"sources":["logo.svg","components/Education.js","components/Projects.js","components/Experience.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","educationList","education","Education","className","map","i","logo","process","key","universityName","src","alt","collegeName","style","fontWeight","degree","duration","location","courses","Grade","projecList","projects","Projects","project","projectName","technologies","href","link","target","rel","paddingRight","description","line","j","experienceList","experience","Experience","position","institution","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,u5LCSrCC,G,gBAA4BC,WAiEnBC,EApCG,WACd,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,WAAf,aACA,yBAAKA,UAAU,kBAEPH,EAAcI,KAAI,SAACH,EAAWI,GAC1B,IAAIC,EAAOC,aAAyBN,EAAUK,KAC9C,OACI,yBAAKH,UAAU,MAAMK,IAAOH,GACxB,yBAAKF,UAAU,OAAOK,IAAKH,GACvB,yBAAKF,UAAU,gBACX,yBAAKA,UAAU,cAAcF,EAAUQ,gBACvC,yBAAKC,IAAKJ,EAAMK,IAAI,OAAOR,UAAU,oBAEzC,6BACA,yBAAKA,UAAU,WAAWF,EAAUW,aACpC,yBAAKC,MAAS,CAACC,WAAY,SAAUb,EAAUc,QAC/C,yBAAKZ,UAAU,YAAYF,EAAUe,UACrC,6BAAMf,EAAUgB,UAChB,6BACA,yBAAKd,UAAU,gBACX,yCAAeF,EAAUiB,SACzB,6BACA,yBAAKL,MAAS,CAACC,WAAY,SAA3B,UAA4Cb,EAAUkB,gBCrDxFC,E,KAAwBC,SA0EfC,EAvCE,WACb,OACI,yBAAKnB,UAAU,WACX,yBAAKA,UAAU,WAAf,YACA,yBAAKA,UAAU,kBAEPiB,EAAWhB,KAAI,SAACmB,EAASlB,GACrB,OACI,yBAAKF,UAAU,MAAMK,IAAKH,GACtB,yBAAKF,UAAU,OAAOK,IAAKH,GACvB,yBAAKF,UAAU,cAAcoB,EAAQC,aAErC,yBAAKrB,UAAU,cAAf,iBAA2CoB,EAAQE,cAEnD,yBAAKtB,UAAU,YAAYoB,EAAQP,UACnC,6BACA,uBAAGU,KAAMH,EAAQI,KAAMC,OAAO,SAASC,IAAI,uBACvC,yBAAKnB,IAnDhCH,2CAmD2CI,IAAI,OAAOR,UAAU,kBAEzC,6BACA,yBAAKA,UAAU,eAAeU,MAAS,CAACiB,aAAc,SAClD,4BACKP,EAAQQ,YAAY3B,KAAI,SAAC4B,EAAMC,GAC5B,OACI,wBAAI9B,UAAU,cAAcK,IAAKyB,GAAID,gBC3DnFE,E,KAA8BC,WAyErBC,EAzCI,WACf,OACI,yBAAKjC,UAAU,WACX,yBAAKA,UAAU,WAAf,cACA,yBAAKA,UAAU,kBAEP+B,EAAe9B,KAAI,SAAC+B,EAAY9B,GAC5B,IAAIC,EAAOC,aAAyB4B,EAAW7B,KAC/C,OACI,yBAAKH,UAAU,MAAMK,IAAKH,GACtB,yBAAKF,UAAU,OAAOK,IAAKH,GACvB,yBAAKF,UAAU,gBACX,yBAAKA,UAAU,cAAcgC,EAAWE,UACxC,yBAAK3B,IAAKJ,EAAMK,IAAI,OAAOR,UAAU,oBAGzC,yBAAKA,UAAY,WAAWgC,EAAWG,aACvC,6BAAMH,EAAWlB,UACjB,yBAAKd,UAAY,YAAYgC,EAAWnB,UACxC,yBAAKH,MAAS,CAACC,WAAY,SAAUqB,EAAWZ,SAChD,yBAAKpB,UAAU,eAAeU,MAAS,CAACiB,aAAc,SACtD,4BACKK,EAAWJ,YAAY3B,KAAI,SAAC4B,EAAMC,GAC/B,OACI,wBAAI9B,UAAY,cAAcK,IAAKyB,GAAID,gBC3CxEO,MAdf,WACE,OACE,yBAAKpC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKO,IAAKJ,IAAMH,UAAU,qBAAqBQ,IAAI,UAErD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJc6B,QACW,cAA7BC,OAAOxB,SAASyB,UAEe,UAA7BD,OAAOxB,SAASyB,UAEhBD,OAAOxB,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f8f5d7e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d105153d.svg\";","import React from 'react';\r\nimport myeducation from '../data/myeducation.json';\r\nimport '../App.css';\r\n\r\n// import Card from '@material-ui/core/Card';\r\n\r\n// import CardContent from '@material-ui/core/CardContent';\r\n\r\n\r\nconst educationList = myeducation.education;\r\n\r\n// const Education = () => {\r\n//     return (\r\n//         <div className = \"Section\">\r\n//             <div className = \"Heading\">Education</div>\r\n//             {\r\n//             educationList.map((education, i) => {\r\n//                 let logo = process.env.PUBLIC_URL + education.logo;\r\n//                 return (\r\n//                 <div key = {i}>\r\n//                     {/* <img src = {education.logo} alt = \"logo\"/> */}\r\n//                     <img src= {logo} alt=\"logo\" className = \"Logo no-select\"/>\r\n//                     {/* <img src = {require(logo)} alt = \"logo\"/> */}\r\n//                     <div className = \"University\">{education.universityName}</div>\r\n//                     <div>{education.collegeName}</div>\r\n//                     <div>{education.degree}</div>\r\n//                     <div>{education.duration}</div>\r\n//                     <div>{education.location}</div>\r\n//                     <div>Courses: {education.courses}</div>\r\n//                     <div>Grade: {education.Grade}</div>\r\n//                 </div>\r\n//                 );\r\n//             })\r\n//             }\r\n//         </div>\r\n//     );\r\n// }\r\n\r\nconst Education = () => {\r\n    return (\r\n        <div className=\"Section\">\r\n            <div className=\"Heading\">Education</div>\r\n            <div className=\"card-container\">\r\n                {\r\n                    educationList.map((education, i) => {\r\n                        let logo = process.env.PUBLIC_URL + education.logo;\r\n                        return (\r\n                            <div className=\"row\" key = {i}>\r\n                                <div className=\"card\" key={i}>\r\n                                    <div className=\"card-content\">\r\n                                        <div className=\"card-title\">{education.universityName}</div>\r\n                                        <img src={logo} alt=\"logo\" className=\"Logo no-select\" />\r\n                                    </div>\r\n                                    <br />\r\n                                    <div className=\"college\">{education.collegeName}</div>\r\n                                    <div style = {{fontWeight: \"bold\"}}>{education.degree}</div>\r\n                                    <div className=\"Duration\">{education.duration}</div>\r\n                                    <div>{education.location}</div>\r\n                                    <br/>\r\n                                    <div className=\"card-content\">\r\n                                        <div>Courses: {education.courses}</div>\r\n                                        <br/>\r\n                                        <div style = {{fontWeight: \"bold\"}}>Grade: {education.Grade}</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Education;\r\n\r\n\r\n","import React from 'react';\r\nimport myprojects from '../data/myprojects.json';\r\nimport '../App.css';\r\n\r\n// import Card from '@material-ui/core/Card';\r\n// import CardActions from '@material-ui/core/CardActions';\r\n// import CardContent from '@material-ui/core/CardContent';\r\n\r\n\r\nconst projecList = myprojects.projects;\r\nconst link = process.env.PUBLIC_URL + \"/assets/images/source_code.png\";\r\n\r\n// const Projects = () => {\r\n//     return (\r\n//         <div className = \"Section\">\r\n//             <div className = \"Heading\">Projects</div>\r\n//             {\r\n//                 projecList.map((project, i) => {\r\n//                     return (\r\n//                         <div key = {i}>\r\n//                             <div className = \"Project-title\">{project.projectName}</div>\r\n//                             <div>{project.technologies}</div>\r\n//                             <div>{project.duration}</div>\r\n//                             <ul>\r\n//                             {project.description.map((line, j) => {\r\n//                                 return (\r\n//                                     // <div key = {j}>\r\n//                                         <li key = {j}>{line}</li>\r\n//                                     // {/* </div> */}\r\n//                                 );\r\n//                             })}\r\n//                             </ul>\r\n//                             <a href= {project.link} target = \"_blank\" rel=\"noopener noreferrer\">\r\n//                                 <img src={link} alt=\"Link\" className = \"Project-link\"/>\r\n//                             </a>\r\n//                         </div>\r\n//                     );\r\n//                 })\r\n//             }\r\n//         </div>\r\n//     );\r\n// } \r\n\r\n\r\nconst Projects = () => {\r\n    return (\r\n        <div className=\"Section\">\r\n            <div className=\"Heading\">Projects</div>\r\n            <div className=\"card-container\">\r\n                {\r\n                    projecList.map((project, i) => {\r\n                        return (\r\n                            <div className=\"row\" key={i}>\r\n                                <div className=\"card\" key={i}>\r\n                                    <div className=\"card-title\">{project.projectName}</div>\r\n\r\n                                    <div className=\"Technology\">Technologies: {project.technologies}</div>\r\n                                    {/* <div className=\"Technology\">Technologies: <img src = {process.env.PUBLIC_URL + \"/assets/skills_logos/python.png\"} alt = \"Python\" style = {{width: \"15px\"}}/></div> */}\r\n                                    <div className=\"Duration\">{project.duration}</div>\r\n                                    <br />\r\n                                    <a href={project.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                        <img src={link} alt=\"Link\" className=\"Project-link\"/>\r\n                                    </a>\r\n                                    <br />\r\n                                    <div className=\"card-content\" style = {{paddingRight: \"25px\"}}>\r\n                                        <ul>\r\n                                            {project.description.map((line, j) => {\r\n                                                return (\r\n                                                    <li className=\"Description\" key={j}>{line}</li>\r\n                                                );\r\n                                            })}\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Projects;\r\n","import React from 'react';\r\nimport myexperience from '../data/myexperience.json';\r\nimport '../App.css';\r\n\r\n// import Card from '@material-ui/core/Card';\r\n// import CardActions from '@material-ui/core/CardActions';\r\n// import CardContent from '@material-ui/core/CardContent';\r\n\r\n\r\nconst experienceList = myexperience.experience;\r\n\r\n// const Experience = () => {\r\n//     return (\r\n//         <div className = \"Section\">\r\n//             <div className = \"Heading\">Experience</div>\r\n//             {\r\n//                 experienceList.map((experience, i) => {\r\n//                     let logo = process.env.PUBLIC_URL + experience.logo;\r\n//                     return (\r\n//                         <div key = {i}>\r\n//                             <img src= {logo} alt=\"Logo\" className = \"Logo no-select\"/>\r\n//                             <div>{experience.position}</div>\r\n//                             <div>{experience.institution}</div>\r\n//                             <div>{experience.location}</div>\r\n//                             <div>{experience.duration}</div>\r\n//                             <div>{experience.project}</div>\r\n//                             <ul>\r\n//                             {experience.description.map((line, j) => {\r\n//                                 return (\r\n//                                     <li key = {j}>{line}</li>\r\n//                                 );\r\n//                             })}\r\n//                             </ul>\r\n//                         </div>\r\n//                     );\r\n//                 })\r\n//             } \r\n//         </div>\r\n//     );\r\n// }\r\n\r\nconst Experience = () => {\r\n    return (\r\n        <div className=\"Section\">\r\n            <div className=\"Heading\">Experience</div>\r\n            <div className=\"card-container\">\r\n                {\r\n                    experienceList.map((experience, i) => {\r\n                        let logo = process.env.PUBLIC_URL + experience.logo;\r\n                        return (\r\n                            <div className=\"row\" key={i}>\r\n                                <div className=\"card\" key={i}>\r\n                                    <div className=\"card-content\">\r\n                                        <div className=\"card-title\">{experience.position}</div>\r\n                                        <img src={logo} alt=\"Logo\" className=\"Logo no-select\" />\r\n                                    </div>\r\n\r\n                                    <div className = \"college\">{experience.institution}</div>\r\n                                    <div>{experience.location}</div>\r\n                                    <div className = \"Duration\">{experience.duration}</div>\r\n                                    <div style = {{fontWeight: \"bold\"}}>{experience.project}</div>\r\n                                    <div className=\"card-content\" style = {{paddingRight: \"25px\"}}>\r\n                                    <ul>\r\n                                        {experience.description.map((line, j) => {\r\n                                            return (\r\n                                                <li className = \"Description\" key={j}>{line}</li>\r\n                                            );\r\n                                        })}\r\n                                    </ul>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Experience;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport Education from './components/Education.js';\r\nimport Projects from './components/Projects.js';\r\nimport Experience from './components/Experience';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo no-select\" alt=\"logo\" />\r\n      </header>\r\n      <Education />\r\n      <Experience />\r\n      <Projects />\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}